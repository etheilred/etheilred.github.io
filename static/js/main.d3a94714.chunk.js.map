{"version":3,"sources":["components/SymbolSelector.js","App.js","serviceWorker.js","index.js"],"names":["SymbolSelector","props","onChange","symbols","map","x","default","key","selected","App","state","base","loaded","error","value","symbol","rates","excResult","onValueChange","bind","onSymbolChange","onFormSubmit","onBaseChange","fetch","then","resp","json","exRates","setState","Object","keys","catch","e","this","target","toFixed","preventDefault","class","onSubmit","type","placeholder","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"kQAWeA,EATQ,SAACC,GAAD,OACnB,4BAAQC,SAAUD,EAAMC,UACnBD,EAAME,QAAQC,KAAI,SAAAC,GACf,OAAIA,IAAMJ,EAAMK,QAAgB,4BAAQC,IAAKF,EAAGG,SAAS,YAAYH,GACzD,4BAAQE,IAAKF,GAAIA,QCwG1BI,G,wDAzGb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDS,MAAQ,CACXC,KAAM,MACNC,QAAQ,EACRC,MAAO,KACPC,MAAO,EACPC,OAAQ,MACRC,MAAO,GACPb,QAAS,GACTc,UAAW,wDAEb,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBAfH,E,gEAkBE,IAAD,OAClBI,MAAM,+CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZzB,QAAQ,GAAD,mBAAM0B,OAAOC,KAAKH,EAAQX,QAA1B,CAAkC,QACzCD,OAAQc,OAAOC,KAAKH,EAAQX,OAAO,GACnCA,MAAOW,EAAQX,MACfJ,QAAQ,EACRD,KAAMgB,EAAQhB,UAGjBoB,OAAM,SAAA1B,GACL,EAAKuB,SAAS,CACZhB,QAAQ,EACRC,MAAOR,S,oCAKD2B,GAEZC,KAAKL,SAAS,CACZd,OAAQkB,EAAEE,OAAOpB,U,qCAINkB,GAEbC,KAAKL,SAAS,CACZb,OAAQiB,EAAEE,OAAOpB,U,mCAIRkB,GACXC,KAAKL,SAAS,CACZjB,KAAMqB,EAAEE,OAAOpB,U,mCAINkB,GAAI,IAAD,OACdT,MAAM,+CACHC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAR,GACJ,EAAKY,SAAS,CACZX,UAAU,GAAD,OAAK,EAAKP,MAAMI,MAAhB,YAAyB,EAAKJ,MAAMC,KAApC,gBAAgD,EAAKD,MAAMI,MAAQE,EAAMA,MAAM,EAAKN,MAAMK,SAASoB,QAAQ,GAA3G,YAAiH,EAAKzB,MAAMK,aAG3IiB,EAAEI,mB,+BAGM,IAAD,EAC4BH,KAAKvB,MAAhCP,EADD,EACCA,QAASS,EADV,EACUA,OAAQC,EADlB,EACkBA,MACzB,OAAKD,EAMMC,EAEP,yBAAKwB,MAAM,OACT,4BAAKxB,IAKT,yBAAKwB,MAAM,OACT,6BAASA,MAAM,WACb,0BAAMC,SAAUL,KAAKZ,cACnB,2BAAOkB,KAAK,OAAOC,YAAY,QAAQtC,SAAU+B,KAAKf,gBACtD,kBAAC,EAAD,CAAgBf,QAASA,EAASD,SAAU+B,KAAKX,aAAchB,QAAS2B,KAAKvB,MAAMC,OACnF,0BAAM8B,GAAG,MAAT,MACA,kBAAC,EAAD,CAAgBtC,QAASA,EAASD,SAAU+B,KAAKb,eAAgBd,QAAS2B,KAAKvB,MAAMK,UAEvF,yBAAKsB,MAAM,kBACT,4BAAKJ,KAAKvB,MAAMO,aAGpB,4BAAQoB,MAAM,UAAd,wBAxBA,yBAAKA,MAAM,OACT,+C,GA3EQK,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEd1B,OAAM,SAAAlB,GACL6C,QAAQ7C,MAAMA,EAAM8C,a","file":"static/js/main.d3a94714.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst SymbolSelector = (props) => (\r\n    <select onChange={props.onChange}>\r\n        {props.symbols.map(x => {\r\n            if (x === props.default) return <option key={x} selected='selected'>{x}</option>\r\n            else return <option key={x}>{x}</option>\r\n        })}\r\n    </select>\r\n);\r\n\r\nexport default SymbolSelector;","import React, { Component } from 'react';\nimport SymbolSelector from './components/SymbolSelector'\nimport './App.css'\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      base: 'USD',\n      loaded: false,\n      error: null,\n      value: 1,\n      symbol: 'USD',\n      rates: {},\n      symbols: [],\n      excResult: 'Try typing in value and selecting currency symbol...'\n    }\n    this.onValueChange = this.onValueChange.bind(this)\n    this.onSymbolChange = this.onSymbolChange.bind(this)\n    this.onFormSubmit = this.onFormSubmit.bind(this)\n    this.onBaseChange = this.onBaseChange.bind(this)\n  }\n\n  componentDidMount() {\n    fetch(\"https://api.ratesapi.io/api/latest?base=USD\")\n      .then(resp => resp.json())\n      .then(exRates => {\n        this.setState({\n          symbols: [...Object.keys(exRates.rates), 'USD'],\n          symbol: Object.keys(exRates.rates)[0],\n          rates: exRates.rates,\n          loaded: true,\n          base: exRates.base\n        })\n      })\n      .catch(x => {\n        this.setState({\n          loaded: true,\n          error: x\n        })\n      })\n  }\n\n  onValueChange(e) {\n    // alert(+e.target.value)\n    this.setState({\n      value: +e.target.value\n    });\n  }\n\n  onSymbolChange(e) {\n    // alert(e.target.value)\n    this.setState({\n      symbol: e.target.value\n    });\n  }\n\n  onBaseChange(e) {\n    this.setState({\n      base: e.target.value\n    });\n  }\n\n  onFormSubmit(e) {\n    fetch(\"https://api.ratesapi.io/api/latest?base=USD\")\n      .then(resp => resp.json())\n      .then(rates => {\n        this.setState({\n          excResult: `${this.state.value} ${this.state.base} is ${(this.state.value * rates.rates[this.state.symbol]).toFixed(2)} ${this.state.symbol}`\n        })\n      })\n    e.preventDefault()\n  }\n\n  render() {\n    const { symbols, loaded, error } = this.state;\n    if (!loaded) {\n      return (\n        <div class=\"App\">\n          <h2>Loading...</h2>\n        </div>\n      );\n    } else if (error) {\n      return (\n        <div class=\"App\">\n          <h2>{error}</h2>\n        </div>\n      )\n    }\n    return (\n      <div class=\"App\">\n        <section class=\"content\">\n          <form onSubmit={this.onFormSubmit}>\n            <input type=\"text\" placeholder=\"Value\" onChange={this.onValueChange} />\n            <SymbolSelector symbols={symbols} onChange={this.onBaseChange} default={this.state.base} />\n            <span id=\"to\">To</span>\n            <SymbolSelector symbols={symbols} onChange={this.onSymbolChange} default={this.state.symbol} />\n          </form>\n          <div class=\"exchangeResult\">\n            <h2>{this.state.excResult}</h2>\n          </div>\n        </section>\n        <footer class=\"footer\">\n          &copy; 2020 Etheilred\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}